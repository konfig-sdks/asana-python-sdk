# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class BatchRequestAction(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An action object for use in a batch request.
    """


    class MetaOapg:
        required = {
            "method",
            "relative_path",
        }
        
        class properties:
            relative_path = schemas.StrSchema
            
            
            class method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "get": "GET",
                        "post": "POST",
                        "put": "PUT",
                        "delete": "DELETE",
                        "patch": "PATCH",
                        "head": "HEAD",
                    }
                
                @schemas.classproperty
                def GET(cls):
                    return cls("get")
                
                @schemas.classproperty
                def POST(cls):
                    return cls("post")
                
                @schemas.classproperty
                def PUT(cls):
                    return cls("put")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("delete")
                
                @schemas.classproperty
                def PATCH(cls):
                    return cls("patch")
                
                @schemas.classproperty
                def HEAD(cls):
                    return cls("head")
            data = schemas.DictSchema
        
            @staticmethod
            def options() -> typing.Type['BatchRequestActionOptions']:
                return BatchRequestActionOptions
            __annotations__ = {
                "relative_path": relative_path,
                "method": method,
                "data": data,
                "options": options,
            }
    
    method: MetaOapg.properties.method
    relative_path: MetaOapg.properties.relative_path
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relative_path"]) -> MetaOapg.properties.relative_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'BatchRequestActionOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relative_path", "method", "data", "options", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relative_path"]) -> MetaOapg.properties.relative_path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['BatchRequestActionOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relative_path", "method", "data", "options", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        method: typing.Union[MetaOapg.properties.method, str, ],
        relative_path: typing.Union[MetaOapg.properties.relative_path, str, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        options: typing.Union['BatchRequestActionOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BatchRequestAction':
        return super().__new__(
            cls,
            *args,
            method=method,
            relative_path=relative_path,
            data=data,
            options=options,
            _configuration=_configuration,
            **kwargs,
        )

from asana_python_sdk.model.batch_request_action_options import BatchRequestActionOptions
