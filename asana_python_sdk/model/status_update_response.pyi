# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class StatusUpdateResponse(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def author() -> typing.Type['UserCompact']:
                        return UserCompact
                    created_at = schemas.DateTimeSchema
                
                    @staticmethod
                    def created_by() -> typing.Type['UserCompact']:
                        return UserCompact
                    hearted = schemas.BoolSchema
                    
                    
                    class hearts(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Like']:
                                return Like
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Like'], typing.List['Like']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'hearts':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Like':
                            return super().__getitem__(i)
                    liked = schemas.BoolSchema
                    
                    
                    class likes(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Like']:
                                return Like
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Like'], typing.List['Like']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'likes':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Like':
                            return super().__getitem__(i)
                    modified_at = schemas.DateTimeSchema
                    num_hearts = schemas.IntSchema
                    num_likes = schemas.IntSchema
                    
                    
                    class parent(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.DictSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    ProjectCompact,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'parent':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "author": author,
                        "created_at": created_at,
                        "created_by": created_by,
                        "hearted": hearted,
                        "hearts": hearts,
                        "liked": liked,
                        "likes": likes,
                        "modified_at": modified_at,
                        "num_hearts": num_hearts,
                        "num_likes": num_likes,
                        "parent": parent,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'UserCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> 'UserCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hearted"]) -> MetaOapg.properties.hearted: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hearts"]) -> MetaOapg.properties.hearts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["likes"]) -> MetaOapg.properties.likes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["modified_at"]) -> MetaOapg.properties.modified_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["num_hearts"]) -> MetaOapg.properties.num_hearts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["num_likes"]) -> MetaOapg.properties.num_likes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["author", "created_at", "created_by", "hearted", "hearts", "liked", "likes", "modified_at", "num_hearts", "num_likes", "parent", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union['UserCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union['UserCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hearted"]) -> typing.Union[MetaOapg.properties.hearted, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hearts"]) -> typing.Union[MetaOapg.properties.hearts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["liked"]) -> typing.Union[MetaOapg.properties.liked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["likes"]) -> typing.Union[MetaOapg.properties.likes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["modified_at"]) -> typing.Union[MetaOapg.properties.modified_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["num_hearts"]) -> typing.Union[MetaOapg.properties.num_hearts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["num_likes"]) -> typing.Union[MetaOapg.properties.num_likes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union[MetaOapg.properties.parent, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["author", "created_at", "created_by", "hearted", "hearts", "liked", "likes", "modified_at", "num_hearts", "num_likes", "parent", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                author: typing.Union['UserCompact', schemas.Unset] = schemas.unset,
                created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
                created_by: typing.Union['UserCompact', schemas.Unset] = schemas.unset,
                hearted: typing.Union[MetaOapg.properties.hearted, bool, schemas.Unset] = schemas.unset,
                hearts: typing.Union[MetaOapg.properties.hearts, list, tuple, schemas.Unset] = schemas.unset,
                liked: typing.Union[MetaOapg.properties.liked, bool, schemas.Unset] = schemas.unset,
                likes: typing.Union[MetaOapg.properties.likes, list, tuple, schemas.Unset] = schemas.unset,
                modified_at: typing.Union[MetaOapg.properties.modified_at, str, datetime, schemas.Unset] = schemas.unset,
                num_hearts: typing.Union[MetaOapg.properties.num_hearts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                num_likes: typing.Union[MetaOapg.properties.num_likes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                parent: typing.Union[MetaOapg.properties.parent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    author=author,
                    created_at=created_at,
                    created_by=created_by,
                    hearted=hearted,
                    hearts=hearts,
                    liked=liked,
                    likes=likes,
                    modified_at=modified_at,
                    num_hearts=num_hearts,
                    num_likes=num_likes,
                    parent=parent,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                StatusUpdateBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StatusUpdateResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from asana_python_sdk.model.like import Like
from asana_python_sdk.model.project_compact import ProjectCompact
from asana_python_sdk.model.status_update_base import StatusUpdateBase
from asana_python_sdk.model.user_compact import UserCompact
