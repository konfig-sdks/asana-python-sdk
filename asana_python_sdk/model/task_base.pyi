# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class TaskBase(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class approval_status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def PENDING(cls):
                            return cls("pending")
                        
                        @schemas.classproperty
                        def APPROVED(cls):
                            return cls("approved")
                        
                        @schemas.classproperty
                        def REJECTED(cls):
                            return cls("rejected")
                        
                        @schemas.classproperty
                        def CHANGES_REQUESTED(cls):
                            return cls("changes_requested")
                    
                    
                    class assignee_status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def TODAY(cls):
                            return cls("today")
                        
                        @schemas.classproperty
                        def UPCOMING(cls):
                            return cls("upcoming")
                        
                        @schemas.classproperty
                        def LATER(cls):
                            return cls("later")
                        
                        @schemas.classproperty
                        def NEW(cls):
                            return cls("new")
                        
                        @schemas.classproperty
                        def INBOX(cls):
                            return cls("inbox")
                    completed = schemas.BoolSchema
                    
                    
                    class completed_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'completed_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class completed_by(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    UserCompact,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'completed_by':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    created_at = schemas.DateTimeSchema
                    
                    
                    class dependencies(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['AsanaResource']:
                                return AsanaResource
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['AsanaResource'], typing.List['AsanaResource']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'dependencies':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'AsanaResource':
                            return super().__getitem__(i)
                    
                    
                    class dependents(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['AsanaResource']:
                                return AsanaResource
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['AsanaResource'], typing.List['AsanaResource']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'dependents':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'AsanaResource':
                            return super().__getitem__(i)
                    
                    
                    class due_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'due_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class due_on(
                        schemas.DateBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, date, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'due_on':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class external(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                gid = schemas.StrSchema
                                data = schemas.StrSchema
                                __annotations__ = {
                                    "gid": gid,
                                    "data": data,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["gid"]) -> MetaOapg.properties.gid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["gid", "data", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["gid"]) -> typing.Union[MetaOapg.properties.gid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gid", "data", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            gid: typing.Union[MetaOapg.properties.gid, str, schemas.Unset] = schemas.unset,
                            data: typing.Union[MetaOapg.properties.data, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'external':
                            return super().__new__(
                                cls,
                                *args,
                                gid=gid,
                                data=data,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    html_notes = schemas.StrSchema
                    hearted = schemas.BoolSchema
                    
                    
                    class hearts(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Like']:
                                return Like
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Like'], typing.List['Like']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'hearts':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Like':
                            return super().__getitem__(i)
                    is_rendered_as_separator = schemas.BoolSchema
                    liked = schemas.BoolSchema
                    
                    
                    class likes(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Like']:
                                return Like
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Like'], typing.List['Like']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'likes':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Like':
                            return super().__getitem__(i)
                    
                    
                    class memberships(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def project() -> typing.Type['ProjectCompact']:
                                            return ProjectCompact
                                    
                                        @staticmethod
                                        def section() -> typing.Type['SectionCompact']:
                                            return SectionCompact
                                        __annotations__ = {
                                            "project": project,
                                            "section": section,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'ProjectCompact': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["section"]) -> 'SectionCompact': ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["project", "section", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['ProjectCompact', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> typing.Union['SectionCompact', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["project", "section", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    project: typing.Union['ProjectCompact', schemas.Unset] = schemas.unset,
                                    section: typing.Union['SectionCompact', schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        project=project,
                                        section=section,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'memberships':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    modified_at = schemas.DateTimeSchema
                    name = schemas.StrSchema
                    notes = schemas.StrSchema
                    num_hearts = schemas.IntSchema
                    num_likes = schemas.IntSchema
                    num_subtasks = schemas.IntSchema
                    
                    
                    class start_at(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'start_at':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class start_on(
                        schemas.DateBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date'
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, date, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'start_on':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class actual_time_minutes(
                        schemas.NumberBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, float, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'actual_time_minutes':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "approval_status": approval_status,
                        "assignee_status": assignee_status,
                        "completed": completed,
                        "completed_at": completed_at,
                        "completed_by": completed_by,
                        "created_at": created_at,
                        "dependencies": dependencies,
                        "dependents": dependents,
                        "due_at": due_at,
                        "due_on": due_on,
                        "external": external,
                        "html_notes": html_notes,
                        "hearted": hearted,
                        "hearts": hearts,
                        "is_rendered_as_separator": is_rendered_as_separator,
                        "liked": liked,
                        "likes": likes,
                        "memberships": memberships,
                        "modified_at": modified_at,
                        "name": name,
                        "notes": notes,
                        "num_hearts": num_hearts,
                        "num_likes": num_likes,
                        "num_subtasks": num_subtasks,
                        "start_at": start_at,
                        "start_on": start_on,
                        "actual_time_minutes": actual_time_minutes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["approval_status"]) -> MetaOapg.properties.approval_status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assignee_status"]) -> MetaOapg.properties.assignee_status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["completed"]) -> MetaOapg.properties.completed: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["completed_at"]) -> MetaOapg.properties.completed_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["completed_by"]) -> MetaOapg.properties.completed_by: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dependencies"]) -> MetaOapg.properties.dependencies: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dependents"]) -> MetaOapg.properties.dependents: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["due_at"]) -> MetaOapg.properties.due_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["due_on"]) -> MetaOapg.properties.due_on: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["external"]) -> MetaOapg.properties.external: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["html_notes"]) -> MetaOapg.properties.html_notes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hearted"]) -> MetaOapg.properties.hearted: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hearts"]) -> MetaOapg.properties.hearts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_rendered_as_separator"]) -> MetaOapg.properties.is_rendered_as_separator: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["likes"]) -> MetaOapg.properties.likes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["memberships"]) -> MetaOapg.properties.memberships: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["modified_at"]) -> MetaOapg.properties.modified_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["num_hearts"]) -> MetaOapg.properties.num_hearts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["num_likes"]) -> MetaOapg.properties.num_likes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["num_subtasks"]) -> MetaOapg.properties.num_subtasks: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["start_at"]) -> MetaOapg.properties.start_at: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["start_on"]) -> MetaOapg.properties.start_on: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["actual_time_minutes"]) -> MetaOapg.properties.actual_time_minutes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["approval_status", "assignee_status", "completed", "completed_at", "completed_by", "created_at", "dependencies", "dependents", "due_at", "due_on", "external", "html_notes", "hearted", "hearts", "is_rendered_as_separator", "liked", "likes", "memberships", "modified_at", "name", "notes", "num_hearts", "num_likes", "num_subtasks", "start_at", "start_on", "actual_time_minutes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["approval_status"]) -> typing.Union[MetaOapg.properties.approval_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assignee_status"]) -> typing.Union[MetaOapg.properties.assignee_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["completed"]) -> typing.Union[MetaOapg.properties.completed, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["completed_at"]) -> typing.Union[MetaOapg.properties.completed_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["completed_by"]) -> typing.Union[MetaOapg.properties.completed_by, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dependencies"]) -> typing.Union[MetaOapg.properties.dependencies, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dependents"]) -> typing.Union[MetaOapg.properties.dependents, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["due_at"]) -> typing.Union[MetaOapg.properties.due_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["due_on"]) -> typing.Union[MetaOapg.properties.due_on, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["external"]) -> typing.Union[MetaOapg.properties.external, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["html_notes"]) -> typing.Union[MetaOapg.properties.html_notes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hearted"]) -> typing.Union[MetaOapg.properties.hearted, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hearts"]) -> typing.Union[MetaOapg.properties.hearts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_rendered_as_separator"]) -> typing.Union[MetaOapg.properties.is_rendered_as_separator, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["liked"]) -> typing.Union[MetaOapg.properties.liked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["likes"]) -> typing.Union[MetaOapg.properties.likes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["memberships"]) -> typing.Union[MetaOapg.properties.memberships, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["modified_at"]) -> typing.Union[MetaOapg.properties.modified_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["num_hearts"]) -> typing.Union[MetaOapg.properties.num_hearts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["num_likes"]) -> typing.Union[MetaOapg.properties.num_likes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["num_subtasks"]) -> typing.Union[MetaOapg.properties.num_subtasks, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["start_at"]) -> typing.Union[MetaOapg.properties.start_at, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["start_on"]) -> typing.Union[MetaOapg.properties.start_on, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["actual_time_minutes"]) -> typing.Union[MetaOapg.properties.actual_time_minutes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["approval_status", "assignee_status", "completed", "completed_at", "completed_by", "created_at", "dependencies", "dependents", "due_at", "due_on", "external", "html_notes", "hearted", "hearts", "is_rendered_as_separator", "liked", "likes", "memberships", "modified_at", "name", "notes", "num_hearts", "num_likes", "num_subtasks", "start_at", "start_on", "actual_time_minutes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                approval_status: typing.Union[MetaOapg.properties.approval_status, str, schemas.Unset] = schemas.unset,
                assignee_status: typing.Union[MetaOapg.properties.assignee_status, str, schemas.Unset] = schemas.unset,
                completed: typing.Union[MetaOapg.properties.completed, bool, schemas.Unset] = schemas.unset,
                completed_at: typing.Union[MetaOapg.properties.completed_at, None, str, datetime, schemas.Unset] = schemas.unset,
                completed_by: typing.Union[MetaOapg.properties.completed_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
                dependencies: typing.Union[MetaOapg.properties.dependencies, list, tuple, schemas.Unset] = schemas.unset,
                dependents: typing.Union[MetaOapg.properties.dependents, list, tuple, schemas.Unset] = schemas.unset,
                due_at: typing.Union[MetaOapg.properties.due_at, None, str, datetime, schemas.Unset] = schemas.unset,
                due_on: typing.Union[MetaOapg.properties.due_on, None, str, date, schemas.Unset] = schemas.unset,
                external: typing.Union[MetaOapg.properties.external, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                html_notes: typing.Union[MetaOapg.properties.html_notes, str, schemas.Unset] = schemas.unset,
                hearted: typing.Union[MetaOapg.properties.hearted, bool, schemas.Unset] = schemas.unset,
                hearts: typing.Union[MetaOapg.properties.hearts, list, tuple, schemas.Unset] = schemas.unset,
                is_rendered_as_separator: typing.Union[MetaOapg.properties.is_rendered_as_separator, bool, schemas.Unset] = schemas.unset,
                liked: typing.Union[MetaOapg.properties.liked, bool, schemas.Unset] = schemas.unset,
                likes: typing.Union[MetaOapg.properties.likes, list, tuple, schemas.Unset] = schemas.unset,
                memberships: typing.Union[MetaOapg.properties.memberships, list, tuple, schemas.Unset] = schemas.unset,
                modified_at: typing.Union[MetaOapg.properties.modified_at, str, datetime, schemas.Unset] = schemas.unset,
                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
                num_hearts: typing.Union[MetaOapg.properties.num_hearts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                num_likes: typing.Union[MetaOapg.properties.num_likes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                num_subtasks: typing.Union[MetaOapg.properties.num_subtasks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                start_at: typing.Union[MetaOapg.properties.start_at, None, str, datetime, schemas.Unset] = schemas.unset,
                start_on: typing.Union[MetaOapg.properties.start_on, None, str, date, schemas.Unset] = schemas.unset,
                actual_time_minutes: typing.Union[MetaOapg.properties.actual_time_minutes, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    approval_status=approval_status,
                    assignee_status=assignee_status,
                    completed=completed,
                    completed_at=completed_at,
                    completed_by=completed_by,
                    created_at=created_at,
                    dependencies=dependencies,
                    dependents=dependents,
                    due_at=due_at,
                    due_on=due_on,
                    external=external,
                    html_notes=html_notes,
                    hearted=hearted,
                    hearts=hearts,
                    is_rendered_as_separator=is_rendered_as_separator,
                    liked=liked,
                    likes=likes,
                    memberships=memberships,
                    modified_at=modified_at,
                    name=name,
                    notes=notes,
                    num_hearts=num_hearts,
                    num_likes=num_likes,
                    num_subtasks=num_subtasks,
                    start_at=start_at,
                    start_on=start_on,
                    actual_time_minutes=actual_time_minutes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                TaskCompact,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskBase':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from asana_python_sdk.model.asana_resource import AsanaResource
from asana_python_sdk.model.like import Like
from asana_python_sdk.model.project_compact import ProjectCompact
from asana_python_sdk.model.section_compact import SectionCompact
from asana_python_sdk.model.task_compact import TaskCompact
from asana_python_sdk.model.user_compact import UserCompact
