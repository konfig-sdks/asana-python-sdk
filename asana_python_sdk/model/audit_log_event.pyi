# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class AuditLogEvent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An object representing a single event within an Asana domain.

Every audit log event is comprised of an `event_type`, `actor`, `resource`, and `context`. Some events will include additional metadata about the event under `details`. See our [currently supported list of events](/docs/audit-log-events#supported-audit-log-events) for more details.
    """


    class MetaOapg:
        
        class properties:
            gid = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            event_type = schemas.StrSchema
            event_category = schemas.StrSchema
        
            @staticmethod
            def actor() -> typing.Type['AuditLogEventActor']:
                return AuditLogEventActor
        
            @staticmethod
            def resource() -> typing.Type['AuditLogEventResource']:
                return AuditLogEventResource
            details = schemas.DictSchema
        
            @staticmethod
            def context() -> typing.Type['AuditLogEventContext']:
                return AuditLogEventContext
            __annotations__ = {
                "gid": gid,
                "created_at": created_at,
                "event_type": event_type,
                "event_category": event_category,
                "actor": actor,
                "resource": resource,
                "details": details,
                "context": context,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gid"]) -> MetaOapg.properties.gid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_category"]) -> MetaOapg.properties.event_category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actor"]) -> 'AuditLogEventActor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource"]) -> 'AuditLogEventResource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> 'AuditLogEventContext': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gid", "created_at", "event_type", "event_category", "actor", "resource", "details", "context", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gid"]) -> typing.Union[MetaOapg.properties.gid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> typing.Union[MetaOapg.properties.event_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_category"]) -> typing.Union[MetaOapg.properties.event_category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actor"]) -> typing.Union['AuditLogEventActor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource"]) -> typing.Union['AuditLogEventResource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union['AuditLogEventContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gid", "created_at", "event_type", "event_category", "actor", "resource", "details", "context", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gid: typing.Union[MetaOapg.properties.gid, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        event_type: typing.Union[MetaOapg.properties.event_type, str, schemas.Unset] = schemas.unset,
        event_category: typing.Union[MetaOapg.properties.event_category, str, schemas.Unset] = schemas.unset,
        actor: typing.Union['AuditLogEventActor', schemas.Unset] = schemas.unset,
        resource: typing.Union['AuditLogEventResource', schemas.Unset] = schemas.unset,
        details: typing.Union[MetaOapg.properties.details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        context: typing.Union['AuditLogEventContext', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuditLogEvent':
        return super().__new__(
            cls,
            *args,
            gid=gid,
            created_at=created_at,
            event_type=event_type,
            event_category=event_category,
            actor=actor,
            resource=resource,
            details=details,
            context=context,
            _configuration=_configuration,
            **kwargs,
        )

from asana_python_sdk.model.audit_log_event_actor import AuditLogEventActor
from asana_python_sdk.model.audit_log_event_context import AuditLogEventContext
from asana_python_sdk.model.audit_log_event_resource import AuditLogEventResource
