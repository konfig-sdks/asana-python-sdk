# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class StoryResponse(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def created_by() -> typing.Type['UserCompact']:
                        return UserCompact
                    
                    
                    class type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "comment": "COMMENT",
                                "system": "SYSTEM",
                            }
                        
                        @schemas.classproperty
                        def COMMENT(cls):
                            return cls("comment")
                        
                        @schemas.classproperty
                        def SYSTEM(cls):
                            return cls("system")
                    is_editable = schemas.BoolSchema
                    is_edited = schemas.BoolSchema
                    hearted = schemas.BoolSchema
                    
                    
                    class hearts(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Like']:
                                return Like
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Like'], typing.List['Like']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'hearts':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Like':
                            return super().__getitem__(i)
                    num_hearts = schemas.IntSchema
                    liked = schemas.BoolSchema
                    
                    
                    class likes(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Like']:
                                return Like
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Like'], typing.List['Like']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'likes':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Like':
                            return super().__getitem__(i)
                    num_likes = schemas.IntSchema
                    
                    
                    class previews(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Preview']:
                                return Preview
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Preview'], typing.List['Preview']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'previews':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Preview':
                            return super().__getitem__(i)
                    old_name = schemas.StrSchema
                    
                    
                    class new_name(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'new_name':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                
                    @staticmethod
                    def old_dates() -> typing.Type['StoryResponseDates']:
                        return StoryResponseDates
                
                    @staticmethod
                    def new_dates() -> typing.Type['StoryResponseDates']:
                        return StoryResponseDates
                    old_resource_subtype = schemas.StrSchema
                    new_resource_subtype = schemas.StrSchema
                
                    @staticmethod
                    def story() -> typing.Type['StoryCompact']:
                        return StoryCompact
                
                    @staticmethod
                    def assignee() -> typing.Type['UserCompact']:
                        return UserCompact
                
                    @staticmethod
                    def follower() -> typing.Type['UserCompact']:
                        return UserCompact
                
                    @staticmethod
                    def old_section() -> typing.Type['SectionCompact']:
                        return SectionCompact
                
                    @staticmethod
                    def new_section() -> typing.Type['SectionCompact']:
                        return SectionCompact
                
                    @staticmethod
                    def task() -> typing.Type['TaskCompact']:
                        return TaskCompact
                
                    @staticmethod
                    def project() -> typing.Type['ProjectCompact']:
                        return ProjectCompact
                
                    @staticmethod
                    def tag() -> typing.Type['TagCompact']:
                        return TagCompact
                
                    @staticmethod
                    def custom_field() -> typing.Type['CustomFieldCompact']:
                        return CustomFieldCompact
                    old_text_value = schemas.StrSchema
                    new_text_value = schemas.StrSchema
                    
                    
                    class old_number_value(
                        schemas.IntBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneDecimalMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'old_number_value':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    new_number_value = schemas.IntSchema
                
                    @staticmethod
                    def old_enum_value() -> typing.Type['EnumOption']:
                        return EnumOption
                
                    @staticmethod
                    def new_enum_value() -> typing.Type['EnumOption']:
                        return EnumOption
                    
                    
                    class old_date_value(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    StoryResponseDates,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'old_date_value':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class new_date_value(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    StoryResponseDates,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'new_date_value':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class old_people_value(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UserCompact']:
                                return UserCompact
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['UserCompact'], typing.List['UserCompact']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'old_people_value':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UserCompact':
                            return super().__getitem__(i)
                    
                    
                    class new_people_value(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UserCompact']:
                                return UserCompact
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['UserCompact'], typing.List['UserCompact']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'new_people_value':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UserCompact':
                            return super().__getitem__(i)
                    
                    
                    class old_multi_enum_values(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['EnumOption']:
                                return EnumOption
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['EnumOption'], typing.List['EnumOption']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'old_multi_enum_values':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'EnumOption':
                            return super().__getitem__(i)
                    
                    
                    class new_multi_enum_values(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['EnumOption']:
                                return EnumOption
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['EnumOption'], typing.List['EnumOption']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'new_multi_enum_values':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'EnumOption':
                            return super().__getitem__(i)
                    new_approval_status = schemas.StrSchema
                    old_approval_status = schemas.StrSchema
                
                    @staticmethod
                    def duplicate_of() -> typing.Type['TaskCompact']:
                        return TaskCompact
                
                    @staticmethod
                    def duplicated_from() -> typing.Type['TaskCompact']:
                        return TaskCompact
                
                    @staticmethod
                    def dependency() -> typing.Type['TaskCompact']:
                        return TaskCompact
                    
                    
                    class source(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "web": "WEB",
                                "email": "EMAIL",
                                "mobile": "MOBILE",
                                "api": "API",
                                "unknown": "UNKNOWN",
                            }
                        
                        @schemas.classproperty
                        def WEB(cls):
                            return cls("web")
                        
                        @schemas.classproperty
                        def EMAIL(cls):
                            return cls("email")
                        
                        @schemas.classproperty
                        def MOBILE(cls):
                            return cls("mobile")
                        
                        @schemas.classproperty
                        def API(cls):
                            return cls("api")
                        
                        @schemas.classproperty
                        def UNKNOWN(cls):
                            return cls("unknown")
                    
                    
                    class target(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            all_of_1 = schemas.DictSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    TaskCompact,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'target':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "created_by": created_by,
                        "type": type,
                        "is_editable": is_editable,
                        "is_edited": is_edited,
                        "hearted": hearted,
                        "hearts": hearts,
                        "num_hearts": num_hearts,
                        "liked": liked,
                        "likes": likes,
                        "num_likes": num_likes,
                        "previews": previews,
                        "old_name": old_name,
                        "new_name": new_name,
                        "old_dates": old_dates,
                        "new_dates": new_dates,
                        "old_resource_subtype": old_resource_subtype,
                        "new_resource_subtype": new_resource_subtype,
                        "story": story,
                        "assignee": assignee,
                        "follower": follower,
                        "old_section": old_section,
                        "new_section": new_section,
                        "task": task,
                        "project": project,
                        "tag": tag,
                        "custom_field": custom_field,
                        "old_text_value": old_text_value,
                        "new_text_value": new_text_value,
                        "old_number_value": old_number_value,
                        "new_number_value": new_number_value,
                        "old_enum_value": old_enum_value,
                        "new_enum_value": new_enum_value,
                        "old_date_value": old_date_value,
                        "new_date_value": new_date_value,
                        "old_people_value": old_people_value,
                        "new_people_value": new_people_value,
                        "old_multi_enum_values": old_multi_enum_values,
                        "new_multi_enum_values": new_multi_enum_values,
                        "new_approval_status": new_approval_status,
                        "old_approval_status": old_approval_status,
                        "duplicate_of": duplicate_of,
                        "duplicated_from": duplicated_from,
                        "dependency": dependency,
                        "source": source,
                        "target": target,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> 'UserCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_editable"]) -> MetaOapg.properties.is_editable: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_edited"]) -> MetaOapg.properties.is_edited: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hearted"]) -> MetaOapg.properties.hearted: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hearts"]) -> MetaOapg.properties.hearts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["num_hearts"]) -> MetaOapg.properties.num_hearts: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["likes"]) -> MetaOapg.properties.likes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["num_likes"]) -> MetaOapg.properties.num_likes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["previews"]) -> MetaOapg.properties.previews: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_name"]) -> MetaOapg.properties.old_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_name"]) -> MetaOapg.properties.new_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_dates"]) -> 'StoryResponseDates': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_dates"]) -> 'StoryResponseDates': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_resource_subtype"]) -> MetaOapg.properties.old_resource_subtype: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_resource_subtype"]) -> MetaOapg.properties.new_resource_subtype: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["story"]) -> 'StoryCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assignee"]) -> 'UserCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["follower"]) -> 'UserCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_section"]) -> 'SectionCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_section"]) -> 'SectionCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["task"]) -> 'TaskCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["project"]) -> 'ProjectCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tag"]) -> 'TagCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_field"]) -> 'CustomFieldCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_text_value"]) -> MetaOapg.properties.old_text_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_text_value"]) -> MetaOapg.properties.new_text_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_number_value"]) -> MetaOapg.properties.old_number_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_number_value"]) -> MetaOapg.properties.new_number_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_enum_value"]) -> 'EnumOption': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_enum_value"]) -> 'EnumOption': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_date_value"]) -> MetaOapg.properties.old_date_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_date_value"]) -> MetaOapg.properties.new_date_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_people_value"]) -> MetaOapg.properties.old_people_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_people_value"]) -> MetaOapg.properties.new_people_value: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_multi_enum_values"]) -> MetaOapg.properties.old_multi_enum_values: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_multi_enum_values"]) -> MetaOapg.properties.new_multi_enum_values: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["new_approval_status"]) -> MetaOapg.properties.new_approval_status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["old_approval_status"]) -> MetaOapg.properties.old_approval_status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["duplicate_of"]) -> 'TaskCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["duplicated_from"]) -> 'TaskCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dependency"]) -> 'TaskCompact': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_by", "type", "is_editable", "is_edited", "hearted", "hearts", "num_hearts", "liked", "likes", "num_likes", "previews", "old_name", "new_name", "old_dates", "new_dates", "old_resource_subtype", "new_resource_subtype", "story", "assignee", "follower", "old_section", "new_section", "task", "project", "tag", "custom_field", "old_text_value", "new_text_value", "old_number_value", "new_number_value", "old_enum_value", "new_enum_value", "old_date_value", "new_date_value", "old_people_value", "new_people_value", "old_multi_enum_values", "new_multi_enum_values", "new_approval_status", "old_approval_status", "duplicate_of", "duplicated_from", "dependency", "source", "target", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union['UserCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_editable"]) -> typing.Union[MetaOapg.properties.is_editable, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_edited"]) -> typing.Union[MetaOapg.properties.is_edited, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hearted"]) -> typing.Union[MetaOapg.properties.hearted, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hearts"]) -> typing.Union[MetaOapg.properties.hearts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["num_hearts"]) -> typing.Union[MetaOapg.properties.num_hearts, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["liked"]) -> typing.Union[MetaOapg.properties.liked, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["likes"]) -> typing.Union[MetaOapg.properties.likes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["num_likes"]) -> typing.Union[MetaOapg.properties.num_likes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["previews"]) -> typing.Union[MetaOapg.properties.previews, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_name"]) -> typing.Union[MetaOapg.properties.old_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_name"]) -> typing.Union[MetaOapg.properties.new_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_dates"]) -> typing.Union['StoryResponseDates', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_dates"]) -> typing.Union['StoryResponseDates', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_resource_subtype"]) -> typing.Union[MetaOapg.properties.old_resource_subtype, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_resource_subtype"]) -> typing.Union[MetaOapg.properties.new_resource_subtype, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["story"]) -> typing.Union['StoryCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assignee"]) -> typing.Union['UserCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["follower"]) -> typing.Union['UserCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_section"]) -> typing.Union['SectionCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_section"]) -> typing.Union['SectionCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["task"]) -> typing.Union['TaskCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union['ProjectCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union['TagCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_field"]) -> typing.Union['CustomFieldCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_text_value"]) -> typing.Union[MetaOapg.properties.old_text_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_text_value"]) -> typing.Union[MetaOapg.properties.new_text_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_number_value"]) -> typing.Union[MetaOapg.properties.old_number_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_number_value"]) -> typing.Union[MetaOapg.properties.new_number_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_enum_value"]) -> typing.Union['EnumOption', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_enum_value"]) -> typing.Union['EnumOption', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_date_value"]) -> typing.Union[MetaOapg.properties.old_date_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_date_value"]) -> typing.Union[MetaOapg.properties.new_date_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_people_value"]) -> typing.Union[MetaOapg.properties.old_people_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_people_value"]) -> typing.Union[MetaOapg.properties.new_people_value, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_multi_enum_values"]) -> typing.Union[MetaOapg.properties.old_multi_enum_values, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_multi_enum_values"]) -> typing.Union[MetaOapg.properties.new_multi_enum_values, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["new_approval_status"]) -> typing.Union[MetaOapg.properties.new_approval_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["old_approval_status"]) -> typing.Union[MetaOapg.properties.old_approval_status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["duplicate_of"]) -> typing.Union['TaskCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["duplicated_from"]) -> typing.Union['TaskCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dependency"]) -> typing.Union['TaskCompact', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> typing.Union[MetaOapg.properties.target, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_by", "type", "is_editable", "is_edited", "hearted", "hearts", "num_hearts", "liked", "likes", "num_likes", "previews", "old_name", "new_name", "old_dates", "new_dates", "old_resource_subtype", "new_resource_subtype", "story", "assignee", "follower", "old_section", "new_section", "task", "project", "tag", "custom_field", "old_text_value", "new_text_value", "old_number_value", "new_number_value", "old_enum_value", "new_enum_value", "old_date_value", "new_date_value", "old_people_value", "new_people_value", "old_multi_enum_values", "new_multi_enum_values", "new_approval_status", "old_approval_status", "duplicate_of", "duplicated_from", "dependency", "source", "target", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                created_by: typing.Union['UserCompact', schemas.Unset] = schemas.unset,
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                is_editable: typing.Union[MetaOapg.properties.is_editable, bool, schemas.Unset] = schemas.unset,
                is_edited: typing.Union[MetaOapg.properties.is_edited, bool, schemas.Unset] = schemas.unset,
                hearted: typing.Union[MetaOapg.properties.hearted, bool, schemas.Unset] = schemas.unset,
                hearts: typing.Union[MetaOapg.properties.hearts, list, tuple, schemas.Unset] = schemas.unset,
                num_hearts: typing.Union[MetaOapg.properties.num_hearts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                liked: typing.Union[MetaOapg.properties.liked, bool, schemas.Unset] = schemas.unset,
                likes: typing.Union[MetaOapg.properties.likes, list, tuple, schemas.Unset] = schemas.unset,
                num_likes: typing.Union[MetaOapg.properties.num_likes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                previews: typing.Union[MetaOapg.properties.previews, list, tuple, schemas.Unset] = schemas.unset,
                old_name: typing.Union[MetaOapg.properties.old_name, str, schemas.Unset] = schemas.unset,
                new_name: typing.Union[MetaOapg.properties.new_name, None, str, schemas.Unset] = schemas.unset,
                old_dates: typing.Union['StoryResponseDates', schemas.Unset] = schemas.unset,
                new_dates: typing.Union['StoryResponseDates', schemas.Unset] = schemas.unset,
                old_resource_subtype: typing.Union[MetaOapg.properties.old_resource_subtype, str, schemas.Unset] = schemas.unset,
                new_resource_subtype: typing.Union[MetaOapg.properties.new_resource_subtype, str, schemas.Unset] = schemas.unset,
                story: typing.Union['StoryCompact', schemas.Unset] = schemas.unset,
                assignee: typing.Union['UserCompact', schemas.Unset] = schemas.unset,
                follower: typing.Union['UserCompact', schemas.Unset] = schemas.unset,
                old_section: typing.Union['SectionCompact', schemas.Unset] = schemas.unset,
                new_section: typing.Union['SectionCompact', schemas.Unset] = schemas.unset,
                task: typing.Union['TaskCompact', schemas.Unset] = schemas.unset,
                project: typing.Union['ProjectCompact', schemas.Unset] = schemas.unset,
                tag: typing.Union['TagCompact', schemas.Unset] = schemas.unset,
                custom_field: typing.Union['CustomFieldCompact', schemas.Unset] = schemas.unset,
                old_text_value: typing.Union[MetaOapg.properties.old_text_value, str, schemas.Unset] = schemas.unset,
                new_text_value: typing.Union[MetaOapg.properties.new_text_value, str, schemas.Unset] = schemas.unset,
                old_number_value: typing.Union[MetaOapg.properties.old_number_value, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                new_number_value: typing.Union[MetaOapg.properties.new_number_value, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                old_enum_value: typing.Union['EnumOption', schemas.Unset] = schemas.unset,
                new_enum_value: typing.Union['EnumOption', schemas.Unset] = schemas.unset,
                old_date_value: typing.Union[MetaOapg.properties.old_date_value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                new_date_value: typing.Union[MetaOapg.properties.new_date_value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                old_people_value: typing.Union[MetaOapg.properties.old_people_value, list, tuple, schemas.Unset] = schemas.unset,
                new_people_value: typing.Union[MetaOapg.properties.new_people_value, list, tuple, schemas.Unset] = schemas.unset,
                old_multi_enum_values: typing.Union[MetaOapg.properties.old_multi_enum_values, list, tuple, schemas.Unset] = schemas.unset,
                new_multi_enum_values: typing.Union[MetaOapg.properties.new_multi_enum_values, list, tuple, schemas.Unset] = schemas.unset,
                new_approval_status: typing.Union[MetaOapg.properties.new_approval_status, str, schemas.Unset] = schemas.unset,
                old_approval_status: typing.Union[MetaOapg.properties.old_approval_status, str, schemas.Unset] = schemas.unset,
                duplicate_of: typing.Union['TaskCompact', schemas.Unset] = schemas.unset,
                duplicated_from: typing.Union['TaskCompact', schemas.Unset] = schemas.unset,
                dependency: typing.Union['TaskCompact', schemas.Unset] = schemas.unset,
                source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
                target: typing.Union[MetaOapg.properties.target, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    created_by=created_by,
                    type=type,
                    is_editable=is_editable,
                    is_edited=is_edited,
                    hearted=hearted,
                    hearts=hearts,
                    num_hearts=num_hearts,
                    liked=liked,
                    likes=likes,
                    num_likes=num_likes,
                    previews=previews,
                    old_name=old_name,
                    new_name=new_name,
                    old_dates=old_dates,
                    new_dates=new_dates,
                    old_resource_subtype=old_resource_subtype,
                    new_resource_subtype=new_resource_subtype,
                    story=story,
                    assignee=assignee,
                    follower=follower,
                    old_section=old_section,
                    new_section=new_section,
                    task=task,
                    project=project,
                    tag=tag,
                    custom_field=custom_field,
                    old_text_value=old_text_value,
                    new_text_value=new_text_value,
                    old_number_value=old_number_value,
                    new_number_value=new_number_value,
                    old_enum_value=old_enum_value,
                    new_enum_value=new_enum_value,
                    old_date_value=old_date_value,
                    new_date_value=new_date_value,
                    old_people_value=old_people_value,
                    new_people_value=new_people_value,
                    old_multi_enum_values=old_multi_enum_values,
                    new_multi_enum_values=new_multi_enum_values,
                    new_approval_status=new_approval_status,
                    old_approval_status=old_approval_status,
                    duplicate_of=duplicate_of,
                    duplicated_from=duplicated_from,
                    dependency=dependency,
                    source=source,
                    target=target,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                StoryBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StoryResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from asana_python_sdk.model.custom_field_compact import CustomFieldCompact
from asana_python_sdk.model.enum_option import EnumOption
from asana_python_sdk.model.like import Like
from asana_python_sdk.model.preview import Preview
from asana_python_sdk.model.project_compact import ProjectCompact
from asana_python_sdk.model.section_compact import SectionCompact
from asana_python_sdk.model.story_base import StoryBase
from asana_python_sdk.model.story_compact import StoryCompact
from asana_python_sdk.model.story_response_dates import StoryResponseDates
from asana_python_sdk.model.tag_compact import TagCompact
from asana_python_sdk.model.task_compact import TaskCompact
from asana_python_sdk.model.user_compact import UserCompact
