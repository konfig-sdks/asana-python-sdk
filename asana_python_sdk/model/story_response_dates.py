# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class StoryResponseDates(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    *Conditional*
    """


    class MetaOapg:
        
        class properties:
            
            
            class start_on(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'start_on':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class due_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'due_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            due_on = schemas.DateSchema
            __annotations__ = {
                "start_on": start_on,
                "due_at": due_at,
                "due_on": due_on,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_on"]) -> MetaOapg.properties.start_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_at"]) -> MetaOapg.properties.due_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_on"]) -> MetaOapg.properties.due_on: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start_on", "due_at", "due_on", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_on"]) -> typing.Union[MetaOapg.properties.start_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_at"]) -> typing.Union[MetaOapg.properties.due_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_on"]) -> typing.Union[MetaOapg.properties.due_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start_on", "due_at", "due_on", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        start_on: typing.Union[MetaOapg.properties.start_on, None, str, date, schemas.Unset] = schemas.unset,
        due_at: typing.Union[MetaOapg.properties.due_at, None, str, datetime, schemas.Unset] = schemas.unset,
        due_on: typing.Union[MetaOapg.properties.due_on, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StoryResponseDates':
        return super().__new__(
            cls,
            *args,
            start_on=start_on,
            due_at=due_at,
            due_on=due_on,
            _configuration=_configuration,
            **kwargs,
        )
