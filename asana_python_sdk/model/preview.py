# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class Preview(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A collection of rich text that will be displayed as a preview to another app.

This is read-only except for a small group of whitelisted apps.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            fallback = schemas.StrSchema
            footer = schemas.StrSchema
            header = schemas.StrSchema
            header_link = schemas.StrSchema
            html_text = schemas.StrSchema
            text = schemas.StrSchema
            title_link = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "fallback": fallback,
                "footer": footer,
                "header": header,
                "header_link": header_link,
                "html_text": html_text,
                "text": text,
                "title_link": title_link,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallback"]) -> MetaOapg.properties.fallback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["footer"]) -> MetaOapg.properties.footer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header"]) -> MetaOapg.properties.header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header_link"]) -> MetaOapg.properties.header_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_text"]) -> MetaOapg.properties.html_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title_link"]) -> MetaOapg.properties.title_link: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "fallback", "footer", "header", "header_link", "html_text", "text", "title_link", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallback"]) -> typing.Union[MetaOapg.properties.fallback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["footer"]) -> typing.Union[MetaOapg.properties.footer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header"]) -> typing.Union[MetaOapg.properties.header, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header_link"]) -> typing.Union[MetaOapg.properties.header_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_text"]) -> typing.Union[MetaOapg.properties.html_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title_link"]) -> typing.Union[MetaOapg.properties.title_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "fallback", "footer", "header", "header_link", "html_text", "text", "title_link", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        fallback: typing.Union[MetaOapg.properties.fallback, str, schemas.Unset] = schemas.unset,
        footer: typing.Union[MetaOapg.properties.footer, str, schemas.Unset] = schemas.unset,
        header: typing.Union[MetaOapg.properties.header, str, schemas.Unset] = schemas.unset,
        header_link: typing.Union[MetaOapg.properties.header_link, str, schemas.Unset] = schemas.unset,
        html_text: typing.Union[MetaOapg.properties.html_text, str, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        title_link: typing.Union[MetaOapg.properties.title_link, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Preview':
        return super().__new__(
            cls,
            *args,
            title=title,
            fallback=fallback,
            footer=footer,
            header=header,
            header_link=header_link,
            html_text=html_text,
            text=text,
            title_link=title_link,
            _configuration=_configuration,
            **kwargs,
        )
