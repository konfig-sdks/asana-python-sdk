# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class AuditLogEventContext(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The context from which this event originated.
    """


    class MetaOapg:
        
        class properties:
            
            
            class context_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def WEB(cls):
                    return cls("web")
                
                @schemas.classproperty
                def DESKTOP(cls):
                    return cls("desktop")
                
                @schemas.classproperty
                def MOBILE(cls):
                    return cls("mobile")
                
                @schemas.classproperty
                def ASANA_SUPPORT(cls):
                    return cls("asana_support")
                
                @schemas.classproperty
                def ASANA(cls):
                    return cls("asana")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("email")
                
                @schemas.classproperty
                def API(cls):
                    return cls("api")
            
            
            class api_authentication_method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COOKIE(cls):
                    return cls("cookie")
                
                @schemas.classproperty
                def OAUTH(cls):
                    return cls("oauth")
                
                @schemas.classproperty
                def PERSONAL_ACCESS_TOKEN(cls):
                    return cls("personal_access_token")
                
                @schemas.classproperty
                def SERVICE_ACCOUNT(cls):
                    return cls("service_account")
            client_ip_address = schemas.StrSchema
            user_agent = schemas.StrSchema
            oauth_app_name = schemas.StrSchema
            __annotations__ = {
                "context_type": context_type,
                "api_authentication_method": api_authentication_method,
                "client_ip_address": client_ip_address,
                "user_agent": user_agent,
                "oauth_app_name": oauth_app_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context_type"]) -> MetaOapg.properties.context_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["api_authentication_method"]) -> MetaOapg.properties.api_authentication_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_ip_address"]) -> MetaOapg.properties.client_ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_agent"]) -> MetaOapg.properties.user_agent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauth_app_name"]) -> MetaOapg.properties.oauth_app_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["context_type", "api_authentication_method", "client_ip_address", "user_agent", "oauth_app_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context_type"]) -> typing.Union[MetaOapg.properties.context_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["api_authentication_method"]) -> typing.Union[MetaOapg.properties.api_authentication_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_ip_address"]) -> typing.Union[MetaOapg.properties.client_ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_agent"]) -> typing.Union[MetaOapg.properties.user_agent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauth_app_name"]) -> typing.Union[MetaOapg.properties.oauth_app_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["context_type", "api_authentication_method", "client_ip_address", "user_agent", "oauth_app_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        context_type: typing.Union[MetaOapg.properties.context_type, str, schemas.Unset] = schemas.unset,
        api_authentication_method: typing.Union[MetaOapg.properties.api_authentication_method, str, schemas.Unset] = schemas.unset,
        client_ip_address: typing.Union[MetaOapg.properties.client_ip_address, str, schemas.Unset] = schemas.unset,
        user_agent: typing.Union[MetaOapg.properties.user_agent, str, schemas.Unset] = schemas.unset,
        oauth_app_name: typing.Union[MetaOapg.properties.oauth_app_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuditLogEventContext':
        return super().__new__(
            cls,
            *args,
            context_type=context_type,
            api_authentication_method=api_authentication_method,
            client_ip_address=client_ip_address,
            user_agent=user_agent,
            oauth_app_name=oauth_app_name,
            _configuration=_configuration,
            **kwargs,
        )
