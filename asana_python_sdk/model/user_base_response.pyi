# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class UserBaseResponse(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    email = schemas.StrSchema
                    
                    
                    class photo(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                image_21x21 = schemas.StrSchema
                                image_27x27 = schemas.StrSchema
                                image_36x36 = schemas.StrSchema
                                image_60x60 = schemas.StrSchema
                                image_128x128 = schemas.StrSchema
                                image_1024x1024 = schemas.StrSchema
                                __annotations__ = {
                                    "image_21x21": image_21x21,
                                    "image_27x27": image_27x27,
                                    "image_36x36": image_36x36,
                                    "image_60x60": image_60x60,
                                    "image_128x128": image_128x128,
                                    "image_1024x1024": image_1024x1024,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_21x21"]) -> MetaOapg.properties.image_21x21: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_27x27"]) -> MetaOapg.properties.image_27x27: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_36x36"]) -> MetaOapg.properties.image_36x36: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_60x60"]) -> MetaOapg.properties.image_60x60: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_128x128"]) -> MetaOapg.properties.image_128x128: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_1024x1024"]) -> MetaOapg.properties.image_1024x1024: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["image_21x21", "image_27x27", "image_36x36", "image_60x60", "image_128x128", "image_1024x1024", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_21x21"]) -> typing.Union[MetaOapg.properties.image_21x21, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_27x27"]) -> typing.Union[MetaOapg.properties.image_27x27, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_36x36"]) -> typing.Union[MetaOapg.properties.image_36x36, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_60x60"]) -> typing.Union[MetaOapg.properties.image_60x60, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_128x128"]) -> typing.Union[MetaOapg.properties.image_128x128, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_1024x1024"]) -> typing.Union[MetaOapg.properties.image_1024x1024, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["image_21x21", "image_27x27", "image_36x36", "image_60x60", "image_128x128", "image_1024x1024", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            image_21x21: typing.Union[MetaOapg.properties.image_21x21, str, schemas.Unset] = schemas.unset,
                            image_27x27: typing.Union[MetaOapg.properties.image_27x27, str, schemas.Unset] = schemas.unset,
                            image_36x36: typing.Union[MetaOapg.properties.image_36x36, str, schemas.Unset] = schemas.unset,
                            image_60x60: typing.Union[MetaOapg.properties.image_60x60, str, schemas.Unset] = schemas.unset,
                            image_128x128: typing.Union[MetaOapg.properties.image_128x128, str, schemas.Unset] = schemas.unset,
                            image_1024x1024: typing.Union[MetaOapg.properties.image_1024x1024, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'photo':
                            return super().__new__(
                                cls,
                                *args,
                                image_21x21=image_21x21,
                                image_27x27=image_27x27,
                                image_36x36=image_36x36,
                                image_60x60=image_60x60,
                                image_128x128=image_128x128,
                                image_1024x1024=image_1024x1024,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "email": email,
                        "photo": photo,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["photo"]) -> MetaOapg.properties.photo: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "photo", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["photo"]) -> typing.Union[MetaOapg.properties.photo, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "photo", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                photo: typing.Union[MetaOapg.properties.photo, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    email=email,
                    photo=photo,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                UserCompact,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserBaseResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from asana_python_sdk.model.user_compact import UserCompact
