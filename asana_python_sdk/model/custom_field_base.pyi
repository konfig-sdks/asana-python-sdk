# coding: utf-8

"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

    The version of the OpenAPI document: 1.0
    Created by: https://asana.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from asana_python_sdk import schemas  # noqa: F401


class CustomFieldBase(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    description = schemas.StrSchema
                    
                    
                    class enum_options(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['EnumOption']:
                                return EnumOption
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['EnumOption'], typing.List['EnumOption']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'enum_options':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'EnumOption':
                            return super().__getitem__(i)
                    precision = schemas.IntSchema
                    
                    
                    class format(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def CURRENCY(cls):
                            return cls("currency")
                        
                        @schemas.classproperty
                        def IDENTIFIER(cls):
                            return cls("identifier")
                        
                        @schemas.classproperty
                        def PERCENTAGE(cls):
                            return cls("percentage")
                        
                        @schemas.classproperty
                        def CUSTOM(cls):
                            return cls("custom")
                        
                        @schemas.classproperty
                        def DURATION(cls):
                            return cls("duration")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls("none")
                    
                    
                    class currency_code(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'currency_code':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class custom_label(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'custom_label':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class custom_label_position(
                        schemas.EnumBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "prefix": "PREFIX",
                                "suffix": "SUFFIX",
                                None: "NONE",
                            }
                        
                        @schemas.classproperty
                        def PREFIX(cls):
                            return cls("prefix")
                        
                        @schemas.classproperty
                        def SUFFIX(cls):
                            return cls("suffix")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls(None)
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'custom_label_position':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    is_global_to_workspace = schemas.BoolSchema
                    has_notifications_enabled = schemas.BoolSchema
                    
                    
                    class asana_created_field(
                        schemas.EnumBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "a_v_requirements": "A_V_REQUIREMENTS",
                                "account_name": "ACCOUNT_NAME",
                                "actionable": "ACTIONABLE",
                                "align_shipping_link": "ALIGN_SHIPPING_LINK",
                                "align_status": "ALIGN_STATUS",
                                "allotted_time": "ALLOTTED_TIME",
                                "appointment": "APPOINTMENT",
                                "approval_stage": "APPROVAL_STAGE",
                                "approved": "APPROVED",
                                "article_series": "ARTICLE_SERIES",
                                "board_committee": "BOARD_COMMITTEE",
                                "browser": "BROWSER",
                                "campaign_audience": "CAMPAIGN_AUDIENCE",
                                "campaign_project_status": "CAMPAIGN_PROJECT_STATUS",
                                "campaign_regions": "CAMPAIGN_REGIONS",
                                "channel_primary": "CHANNEL_PRIMARY",
                                "client_topic_type": "CLIENT_TOPIC_TYPE",
                                "complete_by": "COMPLETE_BY",
                                "contact": "CONTACT",
                                "contact_email_address": "CONTACT_EMAIL_ADDRESS",
                                "content_channels": "CONTENT_CHANNELS",
                                "content_channels_needed": "CONTENT_CHANNELS_NEEDED",
                                "content_stage": "CONTENT_STAGE",
                                "content_type": "CONTENT_TYPE",
                                "contract": "CONTRACT",
                                "contract_status": "CONTRACT_STATUS",
                                "cost": "COST",
                                "creation_stage": "CREATION_STAGE",
                                "creative_channel": "CREATIVE_CHANNEL",
                                "creative_needed": "CREATIVE_NEEDED",
                                "creative_needs": "CREATIVE_NEEDS",
                                "data_sensitivity": "DATA_SENSITIVITY",
                                "deal_size": "DEAL_SIZE",
                                "delivery_appt": "DELIVERY_APPT",
                                "delivery_appt_date": "DELIVERY_APPT_DATE",
                                "department": "DEPARTMENT",
                                "department_responsible": "DEPARTMENT_RESPONSIBLE",
                                "design_request_needed": "DESIGN_REQUEST_NEEDED",
                                "design_request_type": "DESIGN_REQUEST_TYPE",
                                "discussion_category": "DISCUSSION_CATEGORY",
                                "do_this_task": "DO_THIS_TASK",
                                "editorial_content_status": "EDITORIAL_CONTENT_STATUS",
                                "editorial_content_tag": "EDITORIAL_CONTENT_TAG",
                                "editorial_content_type": "EDITORIAL_CONTENT_TYPE",
                                "effort": "EFFORT",
                                "effort_level": "EFFORT_LEVEL",
                                "est_completion_date": "EST_COMPLETION_DATE",
                                "estimated_time": "ESTIMATED_TIME",
                                "estimated_value": "ESTIMATED_VALUE",
                                "expected_cost": "EXPECTED_COST",
                                "external_steps_needed": "EXTERNAL_STEPS_NEEDED",
                                "favorite_idea": "FAVORITE_IDEA",
                                "feedback_type": "FEEDBACK_TYPE",
                                "financial": "FINANCIAL",
                                "funding_amount": "FUNDING_AMOUNT",
                                "grant_application_process": "GRANT_APPLICATION_PROCESS",
                                "hiring_candidate_status": "HIRING_CANDIDATE_STATUS",
                                "idea_status": "IDEA_STATUS",
                                "ids_link": "IDS_LINK",
                                "ids_patient_link": "IDS_PATIENT_LINK",
                                "implementation_stage": "IMPLEMENTATION_STAGE",
                                "insurance": "INSURANCE",
                                "interview_area": "INTERVIEW_AREA",
                                "interview_question_score": "INTERVIEW_QUESTION_SCORE",
                                "itero_scan_link": "ITERO_SCAN_LINK",
                                "job_s_applied_to": "JOB_S_APPLIED_TO",
                                "lab": "LAB",
                                "launch_status": "LAUNCH_STATUS",
                                "lead_status": "LEAD_STATUS",
                                "localization_language": "LOCALIZATION_LANGUAGE",
                                "localization_market_team": "LOCALIZATION_MARKET_TEAM",
                                "localization_status": "LOCALIZATION_STATUS",
                                "meeting_minutes": "MEETING_MINUTES",
                                "meeting_needed": "MEETING_NEEDED",
                                "minutes": "MINUTES",
                                "mrr": "MRR",
                                "must_localize": "MUST_LOCALIZE",
                                "name_of_foundation": "NAME_OF_FOUNDATION",
                                "need_to_follow_up": "NEED_TO_FOLLOW_UP",
                                "next_appointment": "NEXT_APPOINTMENT",
                                "next_steps_sales": "NEXT_STEPS_SALES",
                                "num_people": "NUM_PEOPLE",
                                "number_of_user_reports": "NUMBER_OF_USER_REPORTS",
                                "office_location": "OFFICE_LOCATION",
                                "onboarding_activity": "ONBOARDING_ACTIVITY",
                                "owner": "OWNER",
                                "participants_needed": "PARTICIPANTS_NEEDED",
                                "patient_date_of_birth": "PATIENT_DATE_OF_BIRTH",
                                "patient_email": "PATIENT_EMAIL",
                                "patient_phone": "PATIENT_PHONE",
                                "patient_status": "PATIENT_STATUS",
                                "phone_number": "PHONE_NUMBER",
                                "planning_category": "PLANNING_CATEGORY",
                                "point_of_contact": "POINT_OF_CONTACT",
                                "position": "POSITION",
                                "post_format": "POST_FORMAT",
                                "prescription": "PRESCRIPTION",
                                "priority": "PRIORITY",
                                "priority_level": "PRIORITY_LEVEL",
                                "product": "PRODUCT",
                                "product_stage": "PRODUCT_STAGE",
                                "progress": "PROGRESS",
                                "project_size": "PROJECT_SIZE",
                                "project_status": "PROJECT_STATUS",
                                "proposed_budget": "PROPOSED_BUDGET",
                                "publish_status": "PUBLISH_STATUS",
                                "reason_for_scan": "REASON_FOR_SCAN",
                                "referral": "REFERRAL",
                                "request_type": "REQUEST_TYPE",
                                "research_status": "RESEARCH_STATUS",
                                "responsible_department": "RESPONSIBLE_DEPARTMENT",
                                "responsible_team": "RESPONSIBLE_TEAM",
                                "risk_assessment_status": "RISK_ASSESSMENT_STATUS",
                                "room_name": "ROOM_NAME",
                                "sales_counterpart": "SALES_COUNTERPART",
                                "sentiment": "SENTIMENT",
                                "shipping_link": "SHIPPING_LINK",
                                "social_channels": "SOCIAL_CHANNELS",
                                "stage": "STAGE",
                                "status": "STATUS",
                                "status_design": "STATUS_DESIGN",
                                "status_of_initiative": "STATUS_OF_INITIATIVE",
                                "system_setup": "SYSTEM_SETUP",
                                "task_progress": "TASK_PROGRESS",
                                "team": "TEAM",
                                "team_marketing": "TEAM_MARKETING",
                                "team_responsible": "TEAM_RESPONSIBLE",
                                "time_it_takes_to_complete_tasks": "TIME_IT_TAKES_TO_COMPLETE_TASKS",
                                "timeframe": "TIMEFRAME",
                                "treatment_type": "TREATMENT_TYPE",
                                "type_work_requests_it": "TYPE_WORK_REQUESTS_IT",
                                "use_agency": "USE_AGENCY",
                                "user_name": "USER_NAME",
                                "vendor_category": "VENDOR_CATEGORY",
                                "vendor_type": "VENDOR_TYPE",
                                "word_count": "WORD_COUNT",
                                None: "NONE",
                            }
                        
                        @schemas.classproperty
                        def A_V_REQUIREMENTS(cls):
                            return cls("a_v_requirements")
                        
                        @schemas.classproperty
                        def ACCOUNT_NAME(cls):
                            return cls("account_name")
                        
                        @schemas.classproperty
                        def ACTIONABLE(cls):
                            return cls("actionable")
                        
                        @schemas.classproperty
                        def ALIGN_SHIPPING_LINK(cls):
                            return cls("align_shipping_link")
                        
                        @schemas.classproperty
                        def ALIGN_STATUS(cls):
                            return cls("align_status")
                        
                        @schemas.classproperty
                        def ALLOTTED_TIME(cls):
                            return cls("allotted_time")
                        
                        @schemas.classproperty
                        def APPOINTMENT(cls):
                            return cls("appointment")
                        
                        @schemas.classproperty
                        def APPROVAL_STAGE(cls):
                            return cls("approval_stage")
                        
                        @schemas.classproperty
                        def APPROVED(cls):
                            return cls("approved")
                        
                        @schemas.classproperty
                        def ARTICLE_SERIES(cls):
                            return cls("article_series")
                        
                        @schemas.classproperty
                        def BOARD_COMMITTEE(cls):
                            return cls("board_committee")
                        
                        @schemas.classproperty
                        def BROWSER(cls):
                            return cls("browser")
                        
                        @schemas.classproperty
                        def CAMPAIGN_AUDIENCE(cls):
                            return cls("campaign_audience")
                        
                        @schemas.classproperty
                        def CAMPAIGN_PROJECT_STATUS(cls):
                            return cls("campaign_project_status")
                        
                        @schemas.classproperty
                        def CAMPAIGN_REGIONS(cls):
                            return cls("campaign_regions")
                        
                        @schemas.classproperty
                        def CHANNEL_PRIMARY(cls):
                            return cls("channel_primary")
                        
                        @schemas.classproperty
                        def CLIENT_TOPIC_TYPE(cls):
                            return cls("client_topic_type")
                        
                        @schemas.classproperty
                        def COMPLETE_BY(cls):
                            return cls("complete_by")
                        
                        @schemas.classproperty
                        def CONTACT(cls):
                            return cls("contact")
                        
                        @schemas.classproperty
                        def CONTACT_EMAIL_ADDRESS(cls):
                            return cls("contact_email_address")
                        
                        @schemas.classproperty
                        def CONTENT_CHANNELS(cls):
                            return cls("content_channels")
                        
                        @schemas.classproperty
                        def CONTENT_CHANNELS_NEEDED(cls):
                            return cls("content_channels_needed")
                        
                        @schemas.classproperty
                        def CONTENT_STAGE(cls):
                            return cls("content_stage")
                        
                        @schemas.classproperty
                        def CONTENT_TYPE(cls):
                            return cls("content_type")
                        
                        @schemas.classproperty
                        def CONTRACT(cls):
                            return cls("contract")
                        
                        @schemas.classproperty
                        def CONTRACT_STATUS(cls):
                            return cls("contract_status")
                        
                        @schemas.classproperty
                        def COST(cls):
                            return cls("cost")
                        
                        @schemas.classproperty
                        def CREATION_STAGE(cls):
                            return cls("creation_stage")
                        
                        @schemas.classproperty
                        def CREATIVE_CHANNEL(cls):
                            return cls("creative_channel")
                        
                        @schemas.classproperty
                        def CREATIVE_NEEDED(cls):
                            return cls("creative_needed")
                        
                        @schemas.classproperty
                        def CREATIVE_NEEDS(cls):
                            return cls("creative_needs")
                        
                        @schemas.classproperty
                        def DATA_SENSITIVITY(cls):
                            return cls("data_sensitivity")
                        
                        @schemas.classproperty
                        def DEAL_SIZE(cls):
                            return cls("deal_size")
                        
                        @schemas.classproperty
                        def DELIVERY_APPT(cls):
                            return cls("delivery_appt")
                        
                        @schemas.classproperty
                        def DELIVERY_APPT_DATE(cls):
                            return cls("delivery_appt_date")
                        
                        @schemas.classproperty
                        def DEPARTMENT(cls):
                            return cls("department")
                        
                        @schemas.classproperty
                        def DEPARTMENT_RESPONSIBLE(cls):
                            return cls("department_responsible")
                        
                        @schemas.classproperty
                        def DESIGN_REQUEST_NEEDED(cls):
                            return cls("design_request_needed")
                        
                        @schemas.classproperty
                        def DESIGN_REQUEST_TYPE(cls):
                            return cls("design_request_type")
                        
                        @schemas.classproperty
                        def DISCUSSION_CATEGORY(cls):
                            return cls("discussion_category")
                        
                        @schemas.classproperty
                        def DO_THIS_TASK(cls):
                            return cls("do_this_task")
                        
                        @schemas.classproperty
                        def EDITORIAL_CONTENT_STATUS(cls):
                            return cls("editorial_content_status")
                        
                        @schemas.classproperty
                        def EDITORIAL_CONTENT_TAG(cls):
                            return cls("editorial_content_tag")
                        
                        @schemas.classproperty
                        def EDITORIAL_CONTENT_TYPE(cls):
                            return cls("editorial_content_type")
                        
                        @schemas.classproperty
                        def EFFORT(cls):
                            return cls("effort")
                        
                        @schemas.classproperty
                        def EFFORT_LEVEL(cls):
                            return cls("effort_level")
                        
                        @schemas.classproperty
                        def EST_COMPLETION_DATE(cls):
                            return cls("est_completion_date")
                        
                        @schemas.classproperty
                        def ESTIMATED_TIME(cls):
                            return cls("estimated_time")
                        
                        @schemas.classproperty
                        def ESTIMATED_VALUE(cls):
                            return cls("estimated_value")
                        
                        @schemas.classproperty
                        def EXPECTED_COST(cls):
                            return cls("expected_cost")
                        
                        @schemas.classproperty
                        def EXTERNAL_STEPS_NEEDED(cls):
                            return cls("external_steps_needed")
                        
                        @schemas.classproperty
                        def FAVORITE_IDEA(cls):
                            return cls("favorite_idea")
                        
                        @schemas.classproperty
                        def FEEDBACK_TYPE(cls):
                            return cls("feedback_type")
                        
                        @schemas.classproperty
                        def FINANCIAL(cls):
                            return cls("financial")
                        
                        @schemas.classproperty
                        def FUNDING_AMOUNT(cls):
                            return cls("funding_amount")
                        
                        @schemas.classproperty
                        def GRANT_APPLICATION_PROCESS(cls):
                            return cls("grant_application_process")
                        
                        @schemas.classproperty
                        def HIRING_CANDIDATE_STATUS(cls):
                            return cls("hiring_candidate_status")
                        
                        @schemas.classproperty
                        def IDEA_STATUS(cls):
                            return cls("idea_status")
                        
                        @schemas.classproperty
                        def IDS_LINK(cls):
                            return cls("ids_link")
                        
                        @schemas.classproperty
                        def IDS_PATIENT_LINK(cls):
                            return cls("ids_patient_link")
                        
                        @schemas.classproperty
                        def IMPLEMENTATION_STAGE(cls):
                            return cls("implementation_stage")
                        
                        @schemas.classproperty
                        def INSURANCE(cls):
                            return cls("insurance")
                        
                        @schemas.classproperty
                        def INTERVIEW_AREA(cls):
                            return cls("interview_area")
                        
                        @schemas.classproperty
                        def INTERVIEW_QUESTION_SCORE(cls):
                            return cls("interview_question_score")
                        
                        @schemas.classproperty
                        def ITERO_SCAN_LINK(cls):
                            return cls("itero_scan_link")
                        
                        @schemas.classproperty
                        def JOB_S_APPLIED_TO(cls):
                            return cls("job_s_applied_to")
                        
                        @schemas.classproperty
                        def LAB(cls):
                            return cls("lab")
                        
                        @schemas.classproperty
                        def LAUNCH_STATUS(cls):
                            return cls("launch_status")
                        
                        @schemas.classproperty
                        def LEAD_STATUS(cls):
                            return cls("lead_status")
                        
                        @schemas.classproperty
                        def LOCALIZATION_LANGUAGE(cls):
                            return cls("localization_language")
                        
                        @schemas.classproperty
                        def LOCALIZATION_MARKET_TEAM(cls):
                            return cls("localization_market_team")
                        
                        @schemas.classproperty
                        def LOCALIZATION_STATUS(cls):
                            return cls("localization_status")
                        
                        @schemas.classproperty
                        def MEETING_MINUTES(cls):
                            return cls("meeting_minutes")
                        
                        @schemas.classproperty
                        def MEETING_NEEDED(cls):
                            return cls("meeting_needed")
                        
                        @schemas.classproperty
                        def MINUTES(cls):
                            return cls("minutes")
                        
                        @schemas.classproperty
                        def MRR(cls):
                            return cls("mrr")
                        
                        @schemas.classproperty
                        def MUST_LOCALIZE(cls):
                            return cls("must_localize")
                        
                        @schemas.classproperty
                        def NAME_OF_FOUNDATION(cls):
                            return cls("name_of_foundation")
                        
                        @schemas.classproperty
                        def NEED_TO_FOLLOW_UP(cls):
                            return cls("need_to_follow_up")
                        
                        @schemas.classproperty
                        def NEXT_APPOINTMENT(cls):
                            return cls("next_appointment")
                        
                        @schemas.classproperty
                        def NEXT_STEPS_SALES(cls):
                            return cls("next_steps_sales")
                        
                        @schemas.classproperty
                        def NUM_PEOPLE(cls):
                            return cls("num_people")
                        
                        @schemas.classproperty
                        def NUMBER_OF_USER_REPORTS(cls):
                            return cls("number_of_user_reports")
                        
                        @schemas.classproperty
                        def OFFICE_LOCATION(cls):
                            return cls("office_location")
                        
                        @schemas.classproperty
                        def ONBOARDING_ACTIVITY(cls):
                            return cls("onboarding_activity")
                        
                        @schemas.classproperty
                        def OWNER(cls):
                            return cls("owner")
                        
                        @schemas.classproperty
                        def PARTICIPANTS_NEEDED(cls):
                            return cls("participants_needed")
                        
                        @schemas.classproperty
                        def PATIENT_DATE_OF_BIRTH(cls):
                            return cls("patient_date_of_birth")
                        
                        @schemas.classproperty
                        def PATIENT_EMAIL(cls):
                            return cls("patient_email")
                        
                        @schemas.classproperty
                        def PATIENT_PHONE(cls):
                            return cls("patient_phone")
                        
                        @schemas.classproperty
                        def PATIENT_STATUS(cls):
                            return cls("patient_status")
                        
                        @schemas.classproperty
                        def PHONE_NUMBER(cls):
                            return cls("phone_number")
                        
                        @schemas.classproperty
                        def PLANNING_CATEGORY(cls):
                            return cls("planning_category")
                        
                        @schemas.classproperty
                        def POINT_OF_CONTACT(cls):
                            return cls("point_of_contact")
                        
                        @schemas.classproperty
                        def POSITION(cls):
                            return cls("position")
                        
                        @schemas.classproperty
                        def POST_FORMAT(cls):
                            return cls("post_format")
                        
                        @schemas.classproperty
                        def PRESCRIPTION(cls):
                            return cls("prescription")
                        
                        @schemas.classproperty
                        def PRIORITY(cls):
                            return cls("priority")
                        
                        @schemas.classproperty
                        def PRIORITY_LEVEL(cls):
                            return cls("priority_level")
                        
                        @schemas.classproperty
                        def PRODUCT(cls):
                            return cls("product")
                        
                        @schemas.classproperty
                        def PRODUCT_STAGE(cls):
                            return cls("product_stage")
                        
                        @schemas.classproperty
                        def PROGRESS(cls):
                            return cls("progress")
                        
                        @schemas.classproperty
                        def PROJECT_SIZE(cls):
                            return cls("project_size")
                        
                        @schemas.classproperty
                        def PROJECT_STATUS(cls):
                            return cls("project_status")
                        
                        @schemas.classproperty
                        def PROPOSED_BUDGET(cls):
                            return cls("proposed_budget")
                        
                        @schemas.classproperty
                        def PUBLISH_STATUS(cls):
                            return cls("publish_status")
                        
                        @schemas.classproperty
                        def REASON_FOR_SCAN(cls):
                            return cls("reason_for_scan")
                        
                        @schemas.classproperty
                        def REFERRAL(cls):
                            return cls("referral")
                        
                        @schemas.classproperty
                        def REQUEST_TYPE(cls):
                            return cls("request_type")
                        
                        @schemas.classproperty
                        def RESEARCH_STATUS(cls):
                            return cls("research_status")
                        
                        @schemas.classproperty
                        def RESPONSIBLE_DEPARTMENT(cls):
                            return cls("responsible_department")
                        
                        @schemas.classproperty
                        def RESPONSIBLE_TEAM(cls):
                            return cls("responsible_team")
                        
                        @schemas.classproperty
                        def RISK_ASSESSMENT_STATUS(cls):
                            return cls("risk_assessment_status")
                        
                        @schemas.classproperty
                        def ROOM_NAME(cls):
                            return cls("room_name")
                        
                        @schemas.classproperty
                        def SALES_COUNTERPART(cls):
                            return cls("sales_counterpart")
                        
                        @schemas.classproperty
                        def SENTIMENT(cls):
                            return cls("sentiment")
                        
                        @schemas.classproperty
                        def SHIPPING_LINK(cls):
                            return cls("shipping_link")
                        
                        @schemas.classproperty
                        def SOCIAL_CHANNELS(cls):
                            return cls("social_channels")
                        
                        @schemas.classproperty
                        def STAGE(cls):
                            return cls("stage")
                        
                        @schemas.classproperty
                        def STATUS(cls):
                            return cls("status")
                        
                        @schemas.classproperty
                        def STATUS_DESIGN(cls):
                            return cls("status_design")
                        
                        @schemas.classproperty
                        def STATUS_OF_INITIATIVE(cls):
                            return cls("status_of_initiative")
                        
                        @schemas.classproperty
                        def SYSTEM_SETUP(cls):
                            return cls("system_setup")
                        
                        @schemas.classproperty
                        def TASK_PROGRESS(cls):
                            return cls("task_progress")
                        
                        @schemas.classproperty
                        def TEAM(cls):
                            return cls("team")
                        
                        @schemas.classproperty
                        def TEAM_MARKETING(cls):
                            return cls("team_marketing")
                        
                        @schemas.classproperty
                        def TEAM_RESPONSIBLE(cls):
                            return cls("team_responsible")
                        
                        @schemas.classproperty
                        def TIME_IT_TAKES_TO_COMPLETE_TASKS(cls):
                            return cls("time_it_takes_to_complete_tasks")
                        
                        @schemas.classproperty
                        def TIMEFRAME(cls):
                            return cls("timeframe")
                        
                        @schemas.classproperty
                        def TREATMENT_TYPE(cls):
                            return cls("treatment_type")
                        
                        @schemas.classproperty
                        def TYPE_WORK_REQUESTS_IT(cls):
                            return cls("type_work_requests_it")
                        
                        @schemas.classproperty
                        def USE_AGENCY(cls):
                            return cls("use_agency")
                        
                        @schemas.classproperty
                        def USER_NAME(cls):
                            return cls("user_name")
                        
                        @schemas.classproperty
                        def VENDOR_CATEGORY(cls):
                            return cls("vendor_category")
                        
                        @schemas.classproperty
                        def VENDOR_TYPE(cls):
                            return cls("vendor_type")
                        
                        @schemas.classproperty
                        def WORD_COUNT(cls):
                            return cls("word_count")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls(None)
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'asana_created_field':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "description": description,
                        "enum_options": enum_options,
                        "precision": precision,
                        "format": format,
                        "currency_code": currency_code,
                        "custom_label": custom_label,
                        "custom_label_position": custom_label_position,
                        "is_global_to_workspace": is_global_to_workspace,
                        "has_notifications_enabled": has_notifications_enabled,
                        "asana_created_field": asana_created_field,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["enum_options"]) -> MetaOapg.properties.enum_options: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> MetaOapg.properties.currency_code: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_label"]) -> MetaOapg.properties.custom_label: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["custom_label_position"]) -> MetaOapg.properties.custom_label_position: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["is_global_to_workspace"]) -> MetaOapg.properties.is_global_to_workspace: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["has_notifications_enabled"]) -> MetaOapg.properties.has_notifications_enabled: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["asana_created_field"]) -> MetaOapg.properties.asana_created_field: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "enum_options", "precision", "format", "currency_code", "custom_label", "custom_label_position", "is_global_to_workspace", "has_notifications_enabled", "asana_created_field", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["enum_options"]) -> typing.Union[MetaOapg.properties.enum_options, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> typing.Union[MetaOapg.properties.precision, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> typing.Union[MetaOapg.properties.currency_code, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_label"]) -> typing.Union[MetaOapg.properties.custom_label, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["custom_label_position"]) -> typing.Union[MetaOapg.properties.custom_label_position, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["is_global_to_workspace"]) -> typing.Union[MetaOapg.properties.is_global_to_workspace, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["has_notifications_enabled"]) -> typing.Union[MetaOapg.properties.has_notifications_enabled, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["asana_created_field"]) -> typing.Union[MetaOapg.properties.asana_created_field, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "enum_options", "precision", "format", "currency_code", "custom_label", "custom_label_position", "is_global_to_workspace", "has_notifications_enabled", "asana_created_field", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                enum_options: typing.Union[MetaOapg.properties.enum_options, list, tuple, schemas.Unset] = schemas.unset,
                precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
                currency_code: typing.Union[MetaOapg.properties.currency_code, None, str, schemas.Unset] = schemas.unset,
                custom_label: typing.Union[MetaOapg.properties.custom_label, None, str, schemas.Unset] = schemas.unset,
                custom_label_position: typing.Union[MetaOapg.properties.custom_label_position, None, str, schemas.Unset] = schemas.unset,
                is_global_to_workspace: typing.Union[MetaOapg.properties.is_global_to_workspace, bool, schemas.Unset] = schemas.unset,
                has_notifications_enabled: typing.Union[MetaOapg.properties.has_notifications_enabled, bool, schemas.Unset] = schemas.unset,
                asana_created_field: typing.Union[MetaOapg.properties.asana_created_field, None, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    description=description,
                    enum_options=enum_options,
                    precision=precision,
                    format=format,
                    currency_code=currency_code,
                    custom_label=custom_label,
                    custom_label_position=custom_label_position,
                    is_global_to_workspace=is_global_to_workspace,
                    has_notifications_enabled=has_notifications_enabled,
                    asana_created_field=asana_created_field,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CustomFieldCompact,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldBase':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from asana_python_sdk.model.custom_field_compact import CustomFieldCompact
from asana_python_sdk.model.enum_option import EnumOption
